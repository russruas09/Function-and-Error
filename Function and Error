// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EWallet {
    mapping(address => uint256) private balances;
    address public owner;

    event Deposit(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    function deposit() external payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function withdraw(uint256 _amount) external {
        require(_amount > 0, "Withdrawal amount must be greater than zero");
        require(balances[msg.sender] >= _amount, "Insufficient balance");

        balances[msg.sender] -= _amount;
        assert(balances[msg.sender] >= 0);

        (bool success, ) = msg.sender.call{value: _amount}("");
        if (!success) {
            balances[msg.sender] += _amount;
            revert("Transfer failed");
        }

        emit Withdraw(msg.sender, _amount);
    }

    function getBalance() external view returns (uint256) {
        return balances[msg.sender];
    }

    function getTotalBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
