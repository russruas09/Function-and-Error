// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RFIDCard {
    address public owner;
    mapping(address => uint256) public cardBalances;

    event FundsLoaded(address user, uint256 amount);
    event PaymentMade(address user, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    function loadFunds() external payable {
        require(msg.value > 0, "Amount must be greater than 0");
        
        cardBalances[msg.sender] += msg.value;
        emit FundsLoaded(msg.sender, msg.value);
    }

    function checkBalance() external view returns (uint256) {
        return cardBalances[msg.sender];
    }

    function makePayment(uint256 _amount) external {
        require(_amount > 0, "Amount must be greater than 0");
        require(cardBalances[msg.sender] >= _amount, "Insufficient balance");

        cardBalances[msg.sender] -= _amount;
        emit PaymentMade(msg.sender, _amount);
    }

    receive() external payable {
        revert("RFID card contract does not accept direct payments");
    }
}
